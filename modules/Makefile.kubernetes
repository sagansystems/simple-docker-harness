CLUSTER_NAMESPACE ?=
CLUSTER_DOMAIN ?= mertslounge.ca
CLUSTER_BASTION ?= bastion.$(CLUSTER_NAMESPACE).$(CLUSTER_DOMAIN)
export CLUSTER_NAMESPACE

KUBERNETES_ANNOTATION ?= $(shell date -u +'%Y-%m-%d %H:%M:%SZ')
KUBERNETES_APP ?= $(subst -docker,,$(shell basename "`pwd`"))
KUBERNETES_RESOURCE_PATH ?= ./kubernetes
KUBERNETES_RESOURCE_VALIDATION ?= configmap
export KUBERNETES_APP

# Kubectl specific settings
KUBECTL ?= /opt/bin/kubectl
KUBECTL_SCHEMA_CACHE_DIR ?= --schema-cache-dir=.kube/cache
KUBEUTIL ?= /opt/bin/kube-util

# Flag to control whether or not `kubernetes:status` is called on deployments
KUBECTL_STATUS ?= true

# Serial number optionally used for versioning; select the last 5 characters of unix time (24 character limit to resource names in k8s)
SERIAL ?= $(shell echo -n $$(date +%s) | tail -c 5)
export SERIAL

# Specify DEBUG=/dev/stderr to get useful output to stderr 
DEBUG ?= /dev/null

define envsubst 
	envsubst < "$(1)" | envsubst | tee $(DEBUG)
endef

define kubectl_apply
	$(call assert,CLUSTER_NAMESPACE)
	$(call assert,CLUSTER_DOMAIN)
	@echo -e "INFO: Applying changes to $(KUBERNETES_APP) $(1) on cluster $(call yellow,$(CLUSTER_NAMESPACE))..."
	@$(call envsubst,$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-$(1).yml) | $(KUBECTL_CMD) apply $(KUBECTL_SCHEMA_CACHE_DIR) -f -
endef

define kubectl_create
	$(call assert,CLUSTER_NAMESPACE)
	$(call assert,CLUSTER_DOMAIN)
	@echo -e "INFO: Creating $(KUBERNETES_APP) $(1) on cluster $(call yellow,$(CLUSTER_NAMESPACE))..."
	@$(call envsubst,$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-$(1).yml) | $(KUBECTL_CMD) create $(KUBECTL_SCHEMA_CACHE_DIR) -f -
endef

define kubectl_delete
	$(call assert,CLUSTER_NAMESPACE)
	$(call assert,CLUSTER_DOMAIN)
	@echo -e "INFO: Deleteting $(KUBERNETES_APP) $(1) on cluster $(call yellow,$(CLUSTER_NAMESPACE))..."
	@$(call envsubst,$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-$(1).yml) | $(KUBECTL_CMD) delete --ignore-not-found=true -f -
endef

ifeq ($(CIRCLECI),true)
  KUBECTL_SSH_USER ?= saganbot
  CLUSTER_NAMESPACE ?= $(CIRCLE_BRANCH)
endif

ifeq ($(strip $(KUBECTL_SSH_USER)),)
  # Guess their github username
	KUBECTL_SSH_USER = $(shell ssh git@github.com 2>&1 | grep 'successfully authenticated' | cut -d' ' -f2 | cut -d'!' -f1 | tr A-Z a-z)
endif

# More kubectl specific settings
KUBECTL_SSH_TUNNEL ?= $(KUBECTL_SSH_USER)@$(CLUSTER_BASTION)
KUBECTL_SSH_SOCK ?= /tmp/kubectl-$(KUBECTL_SSH_TUNNEL)
KUBECTL_SSH_OPTS := -A -o 'LogLevel=error' -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -S $(KUBECTL_SSH_SOCK)
KUBECTL_SSH_CMD := ssh $(KUBECTL_SSH_OPTS)

# Add the SSH endpoint to the command; everything after the host is expected to be a remote command
KUBECTL_SSH_CMD += $(KUBECTL_SSH_TUNNEL)

KUBECTL_CMD ?= $(KUBECTL_SSH_CMD) "$(KUBECTL)" --logtostderr=true --insecure-skip-tls-verify=true

#
# Reference Docs:
#  - https://cloud.google.com/container-engine/docs/kubectl/
#
## Bring up SSH tunnel for kubernetes commands, must be called before executing any targets
kubernetes\:tunnel-up:
	@echo "Please authenticate using your MFA device..."
	@ssh $(KUBECTL_SSH_OPTS) -M -f -N $(KUBECTL_SSH_TUNNEL)

## Tear down kubernetes SSH tunnel, must be called after executing other targets
kubernetes\:tunnel-down:
	@[ -e $(KUBECTL_SSH_SOCK) ] && ssh -S $(KUBECTL_SSH_SOCK) -O exit $(KUBECTL_SSH_TUNNEL)

## Display info about the kubernetes setup
kubernetes\:info:
	@echo -e "Cluster Namespace: $(call yellow,$(CLUSTER_NAMESPACE))"
	@echo -e "Cluster Domain: $(call yellow,$(CLUSTER_DOMAIN))"
	@echo -e "SSH Tunnel: $(call yellow,$(KUBECTL_SSH_TUNNEL))"
	@echo -e "SSH User: $(call yellow,$(KUBECTL_SSH_USER))"

# (private) Validate a configuration
kubernetes\:validate:
	@for env in $$(grep -Eo '\$$[A-Z_0-9]+' $(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-$(KUBERNETES_RESOURCE_VALIDATION).yml | cut -d\$$ -f2); do \
    if [ -z "$${!env}" ]; then \
      echo "$$env not defined in $(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-$(KUBERNETES_RESOURCE_VALIDATION).yml"; \
      exit 1; \
    fi; \
  done

# (private) Delete a horizontalpodautoscaler
kubernetes\:delete-horizontalpodautoscaler:
	$(call kubectl_delete,horizontalpodautoscaler)

# (private) Update horizontalpodautoscaler or create, if necessary
kubernetes\:apply-horizontalpodautoscaler:
	$(call kubectl_apply,horizontalpodautoscaler)

# (private) Delete a configmap
kubernetes\:delete-configmap:
	$(call kubectl_delete,configmap)

# (private) Update configmap or create, if necessary
kubernetes\:apply-configmap:
	$(call kubectl_apply,configmap)

# (private) Delete a secrets
kubernetes\:delete-secrets:
	$(call kubectl_delete,secrets)

# (private) Update secrets or create, if necessary
kubernetes\:apply-secrets:
	$(call kubectl_apply,secrets)

## Update app configmaps and secrets
kubernetes\:configure:
	@[ ! -f "$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-configmap.yml" ] || $(SELF) kubernetes:apply-configmap || $(NOTIFY_FAILURE)
	@[ ! -f "$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-secrets.yml" ] || $(SELF) kubernetes:apply-secrets || $(NOTIFY_FAILURE)
	
# (private) Delete a service
kubernetes\:delete-service:
	$(call kubectl_delete,service)

# (private) Update service or create, if necessary
kubernetes\:apply-service:
	$(call kubectl_apply,service)

# (private) Delete a controller
kubernetes\:delete-controller:
	$(call kubectl_delete,controller)

# (private) Update a controller or create, if necessary
kubernetes\:apply-controller:
	$(call kubectl_apply,controller)

# (private) Delete a deploymentt
kubernetes\:delete-deployment:
	$(call kubectl_delete,deployment)

# (private) Update existing deployment or create, if necessary
kubernetes\:apply-deployment:
	$(call kubectl_apply,deployment)
	@[ "$(KUBECTL_STATUS)" != "true" ] || time $(SELF) kubernetes:status

## Rollback to previous deployment
kubernetes\:undo-deployment:
	@echo -e "INFO: Rolling back to previous deployment of $(KUBERNETES_APP) on cluster $(call yellow,$(CLUSTER_NAMESPACE))..."
	@$(KUBECTL_CMD) rollout undo deployment $(KUBERNETES_APP)

## Deploy everything that needs to be deployed; notify datadog
kubernetes\:deploy:
	@echo -e "INFO: Deploying $(KUBERNETES_APP) resources on cluster $(call yellow,$(CLUSTER_NAMESPACE))..."
	$(NOTIFY_STARTING)
	@[ ! -f "$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-deployment.yml" ] || $(SELF) kubernetes:apply-deployment || $(NOTIFY_FAILURE)
	@[ ! -f "$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-controller.yml" ] || $(SELF) kubernetes:apply-controller || $(NOTIFY_FAILURE)
	@[ ! -f "$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-service.yml" ] || $(SELF) kubernetes:apply-service || $(NOTIFY_FAILURE)
	@[ ! -f "$(KUBERNETES_RESOURCE_PATH)/$(KUBERNETES_APP)-horizontalpodautoscaler.yml" ] || $(SELF) kubernetes:apply-horizontalpodautoscaler || $(NOTIFY_FAILURE)
	$(NOTIFY_SUCCESS)

# (private) Validate a job
kubernetes\:validate-job:
	@$(SELF) kubernetes:validate KUBERNETES_RESOURCE_VALIDATION=job

# (private) Delete a job
kubernetes\:delete-job:
	$(call kubectl_delete,job)

## Run a job
kubernetes\:run-job:
	@$(SELF) kubernetes:validate-job
	@$(SELF) kubernetes:delete-job >/dev/null 2>&1 || true
	$(call kubectl_create,job)

## Show job logs and return job exit code
kubernetes\:job-logs:
	@echo -e "INFO: Monitoring job $(KUBERNETES_APP) on cluster $(call yellow,$(CLUSTER_NAMESPACE))..."
	@$(KUBECTL_SSH_CMD) $(KUBEUTIL) tail-job $(KUBERNETES_APP)

## Output the status of the deployment
kubernetes\:status:
	@$(KUBECTL_CMD) rollout status deployment $(KUBERNETES_APP)

## List deployed replication controllers for app
kubernetes\:list-rc:
	@echo -e "INFO: Listing replication controllers for $(KUBERNETES_APP) on cluster $(call yellow,$(CLUSTER_NAMESPACE))..."
	@$(KUBECTL_CMD) get rc -L tag --selector app=$(KUBERNETES_APP)

## List deployed replica sets for app
kubernetes\:list-rs:
	@echo -e "INFO: Listing replica sets for $(KUBERNETES_APP) on cluster $(call yellow,$(CLUSTER_NAMESPACE))..."
	@$(KUBECTL_CMD) get rs -L tag --selector app=$(KUBERNETES_APP) | grep -Ev '\s+0\s+0\s+'

## List deployed pods for app
kubernetes\:list-pods:
	@echo -e "INFO: Listing pods for $(KUBERNETES_APP) on cluster $(call yellow,$(CLUSTER_NAMESPACE))..."
	@$(KUBECTL_CMD) get pods -L tag --selector app=$(KUBERNETES_APP)

## List deployed services
kubernetes\:list-svc:
	@echo -e "INFO: Listing services on cluster $(call yellow,$(CLUSTER_NAMESPACE))..."
	@$(KUBECTL_CMD) get svc

## Show deployment history
kubernetes\:deployment-history:
	@echo -e "INFO: Listing deployments of $(KUBERNETES_APP) on cluster $(call yellow,$(CLUSTER_NAMESPACE))..."
	@$(KUBECTL_CMD) rollout history deployment $(KUBERNETES_APP)

## List everything that's deployed
kubernetes\:list-deployments:
	@echo -e "INFO: Listing deployments on cluster $(call yellow,$(CLUSTER_NAMESPACE))..."
	@$(KUBECTL_CMD) get deployments -L tag


